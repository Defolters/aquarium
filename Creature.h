#ifndef CREATURE_H
#define CREATURE_H
#include "Object.h"
#include "LifeType.h"
#include "EventControll.h"
#include <mutex>
#include "Coordinates.h"
/*!
\brief Класс, реализующий живое создание

нужны комменты к полям и методам, чтобы я мог помочь и понять.
лайф менеджер вызывает функции так:
thinkAboutIt()
eat()
reproduce()
move()
*/

class Creature
	//: Object
{
public:
    Creature();
    virtual ~Creature();
    //!планктон: если не находится в желаемой точке, то выбирает случайную точку, до которой будет плыть.
    //!рыба: если голод ниже границы, то смотрим вокруг и плывем к ближайшей рыбе размножаться
    //!рыба: если голод выше границы, то смотрим вокруг и плывем к жертве
    //!рыба: если никого не видно, то как и у планктона выбираем случайную цель и плывем к ней, пока никого не заметим
    void thinkAboutIt(); //< каждое существо рефлексирует и строит планы на будущее (чем заняться и в какую координату плыть)
    
    //!функция, которая определяет движение
    //!планктон: в thinkAboutIt выбирает случайную позицию, а затем каждый move() плывет к цели
    //!рыба: если в (текущая позиция + дальность зрения) попала другая рыба и период закончился, то движемся к рыбы
    //!если голод ниже границы и виден планктон, то приоритет еда
    //!если никого не видно, то двигаемся случайно
    Coordinates move(); 
    //! возвращает true у рыбы, если рядом есть рыба и период закончился
    //! возвращает true у планктона, если период закончился.
    bool reproduce();  //!<
    void dayPassed();  //!< функция, которая уменьшает значения жизни, периода и голода и которую вызывает dayPassed() у LifeManager, 
    void eat(); //!< восстанавливает голод, ест только кого-то рангом ниже, при этом создание рангом ниже должно умереть, или вообще не ест (планктон, например)
    std::mutex spriteLocker; //!<
private:
	int lifeExpectancy;  //!< продолжительность жизни
    
    //! количество дней, которые рыба может прожить без еды (есть рыба хочет 
    //! всегда, т.е. всегда плывет к планктону, но приоритет должен стоять у размножения)
    int lifeWitoutFood; //!<

    //! период, в которые создание размножается (напр. каждые 2 дня планктон 
    //! делится почкованием и каждые 4 дня рыба хочет размножаться, т.е 
    //! плывет к другой рыбе, а когда подплывает, то появляется новая рыба)
    int reproductionPeriod;//!<  

    //! тип (рыба, планктон) для getCreatures в аквариуме, для статистики и прочего, чтобы отслеживать легко было.
    LifeType type; //!<
    int rangeOfVision;  //!< дальность зрения рыбы
    int hungerLimit;  //!< граница голода
    int speed; //!< скорость перемещения
    // ИЗМЕНЧИВЫЕ ПЕРЕМЕННЫЕ
    int lifeDaysLeft;  //!< количество дней, которые осталось жить рыбе
    int hunger;  //!< голод
    int reproductionDaysLeft;  //!< количество дней, кот. остались до следующего размножения
}; 

#endif  //! CREATURE_H